interface NodeMessage {
  log? : LoggerFactory;
}

declare interface Smartlog {
  /** Set the title */
  title(title: string): Smartlog;

  /** Create description for Smartlog */
  text(string): Smartlog;

  /** Set the status
   * @param {Status} status - The status of the notification, one of INIT, RECEIVED, ROUTED, TRANSFORMED, DELIVERED, ERROR
   */
  status(status: Status): Smartlog;

  /** Set the source (default is the node name) */
  source(source: string): Smartlog;

  /** Save the log message to the smart:log Server */
  store(): void;
}

/**
 * Document class to log a payload with its corresponding metadata
 * You may chain the metadate functions, e.g.:
 * @example log.payload().client("SAP PP1").messageType("IDOC").direction("INBOUND").store()
 */
declare interface Document {
  /**
   * Set the client, aka the communicating partner (sender or receiver)
   * @param {string} client - The client name
   * @example logger.client("SAP PP1") - for SAP systems
   * @example logger.client("Ganttplan Production Planning") - for SAP systems
   * @returns {Document} The Document instance
   */
  client(client: string): Document;
  /** Set the message type
   * @param {MessageType} messageType - The message type, one of IDOC, XML, JSON, TEXT, BINARY, OTHER
   * @returns {Document} The Document instance
   */
  messageType(messageType: MessageType): Document;
  /** Set the direction
   * @param {Direction} direction - The direction, one of INBOUND, OUTBOUND, TRANSITION
   *
   * @example logger.direction("INBOUND") - for incoming messages
   * @returns {Document} The Document instance
   */
  direction(direction: Direction): Document;

  /**
   * Set the port, aka the communication channel
   * @param {string} port - The port name, e.g. "LOIPRO04", "ISTOSv4"
   * @returns {Document} The Document instance
   */
  port(port: string): Document;

  /**
   * Set the payload, if not set using this method, the payload will be taken from the message object, i.e. `msg.payload`
   */
  data(data: any): Document;

  /**
   * Store payload to server
   */
  store(): void;
}

declare type MessageType =
  | "IDOC"
  | "XML"
  | "JSON"
  | "TEXT"
  | "BINARY"
  | "OTHER";
declare type Status =
  | "INIT"
  | "RECEIVED"
  | "ROUTED"
  | "TRANSFORMED"
  | "DELIVERED"
  | "ERROR";
declare type Direction = "INBOUND" | "OUTBOUND" | "TRANSITION";

declare interface NodeMessage {}

/**
 * Create a logger instance using the message object
 */
declare interface LoggerFactory {
  (msg: NodeMessage, sourceNode?: any): logger;
}

/**
 * Smartlog class
 * with cool jsdoc comments
 */
declare interface logger {
  /** Create info level log message */
  info(): Smartlog;
  /** Create warn level log message */
  warn(): Smartlog;
  error(): Smartlog;
  debug(): Smartlog;

  /** Store payload */
  payload: () => Document;
}
